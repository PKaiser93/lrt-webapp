const path = require('path');

const AppSetting = require('../models/AppSetting');

module.exports = async (req, res, next) => {
  // console.log('ðŸ”§ [Maintenance] URL:', req.originalUrl, 'User:', req.user?.username)

  // 1) Settingsâ€‘Endpoint immer durchlassen
  if (
    req.originalUrl === '/admin/settings' ||
        req.originalUrl === '/api/admin/settings'
  ) {
    // console.log('ðŸ”§ [Maintenance] Passing through settings endpoint')
    return next();
  }

  // 2) Flag aus der DB holen
  const setting = await AppSetting.findOne({ key: 'maintenanceMode' });
  const maintenanceOn = Boolean(setting?.value);
  // console.log('ðŸ”§ [Maintenance] Flag in DB:', maintenanceOn)

  // 3) Wenn aus ist â†’ weiter
  if (!maintenanceOn) {
    // console.log('ðŸ”§ [Maintenance] OFF â†’ next()')
    return next();
  }

  // 4) Admins dÃ¼rfen weiter
  if (req.user?.isAdmin) {
    // console.log('ðŸ”§ [Maintenance] Admin â†’ next()')
    return next();
  }

  // 5) Static Assets?
  if (req.path.startsWith('/assets') || req.path === '/favicon.ico') {
    // console.log('ðŸ”§ [Maintenance] Asset â†’ next()')
    return next();
  }

  // 6) APIâ€‘Request â†’ 503 JSON
  if (req.originalUrl.startsWith('/api/')) {
    // console.log('ðŸ”§ [Maintenance] API â†’ 503 JSON')
    return res.status(503).json({ error: 'Wartungsarbeiten' });
  }

  // 7) Alles andere â†’ Maintenanceâ€‘Seite
  // console.log('ðŸ”§ [Maintenance] Redirect to maintenance page')
  return res
    .status(503)
    .sendFile(path.join(__dirname, '../public/maintenance.html'));
};
